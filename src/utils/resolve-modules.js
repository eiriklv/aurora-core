/**
 * Dependencies
 */
const set = require('lodash.set');
const asyncEach = require('async-each');
const clone = require('stringify-clone');

/**
 * Utilities
 */
const generateResolvers = require('./generate-resolvers');

/**
 * A method for actually resolving a config
 * from type names to React components.
 * Takes a config object to be resolved and
 * an array of paths generated by the
 * function above (generatePaths)
 */
module.exports = function(
  getModule = () => console.warn('No getModule() method supplied to constructor')
) {
  return function(config) {
    /**
     * Clone the config object to avoid mutation
     */
    const configCopy = clone(config);

    /**
     * Create an array of resolver specifications
     */
    const resolvers = generateResolvers('app', configCopy.app, ({
      path,
      module
    }) => {
      return {
        path: `${path}.type`,
        type: module.type
      };
    });

    /**
     * Return a Promise of the config
     * resolved with modules
     * (React components instead of type strings)
     */
    return new Promise((resolve, reject) => {
      asyncEach(resolvers, (item, cb) => {
        getModule(item.type).then((ReactComponent) => {
          set(configCopy, item.path, ReactComponent);
          cb();
        })
        .catch(cb);
      }, (err) => {
        return err ? reject(err) : resolve(configCopy);
      });
    });
  };
};
