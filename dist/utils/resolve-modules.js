'use strict';

/**
 * Dependencies
 */
var set = require('lodash.set');
var asyncEach = require('async-each');
var clone = require('stringify-clone');

/**
 * Utilities
 */
var generateResolvers = require('./generate-resolvers');

/**
 * A method for actually resolving a config
 * from type names to React components.
 * Takes a config object to be resolved and
 * an array of paths generated by the
 * function above (generatePaths)
 */
module.exports = function () {
  var getModule = arguments.length <= 0 || arguments[0] === undefined ? function () {
    return console.warn('No getModule() method supplied to constructor');
  } : arguments[0];

  return function (config) {
    /**
     * Clone the config object to avoid mutation
     */
    var configCopy = clone(config);

    /**
     * Create an array of resolver specifications
     */
    var resolvers = generateResolvers('app', configCopy.app, function (_ref) {
      var path = _ref.path;
      var module = _ref.module;

      return {
        path: path + '.type',
        type: module.type
      };
    });

    /**
     * Return a Promise of the config
     * resolved with modules
     * (React components instead of type strings)
     */
    return new Promise(function (resolve, reject) {
      asyncEach(resolvers, function (item, cb) {
        getModule(item.type).then(function (ReactComponent) {
          set(configCopy, item.path, ReactComponent);
          cb();
        }).catch(cb);
      }, function (err) {
        return err ? reject(err) : resolve(configCopy);
      });
    });
  };
};